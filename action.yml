name: 'Save actions cache'
description: 'Save actions cache and clean up old files'
branding:
  icon: at-sign
  color: purple
inputs:
  deleteAfter:
    description: 'Number of days after which files should be deleted'
    required: false
    default: "180"
  actionsFolder:
    description: 'Folder that actions are downloaded to'
    required: false
    default: "/actions-runner/_work/_actions"
runs:
  using: 'composite'
  steps:
    - shell: bash
      if: runner.os != 'Windows'
      run: |
        #for each tar.gz in ${{ inputs.actionsFolder }}, see if it is in $ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE
        #if not, copy it over
        for dir in ${{ inputs.actionsFolder }}/*/*/*; do
          if [ -d "$dir" ]; then
            owner=$(basename "$(dirname "$(dirname "$dir")")")
            repo=$(basename "$(dirname "$dir")")
            ref=$(basename "$dir")
            
            # Construct the destination directory and file name:
            # Destination directory: $ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE/owner_repo
            # Destination file: ref.tar.gz within that directory
            dest_dir="$ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE/${owner}_${repo}"
            dest_file="$dest_dir/${ref}.tar.gz"
            
            # Check if the tarball file already exists
            if [ ! -f "$dest_file" ]; then
              echo "Tarball for $owner/$repo ($ref) not found. Downloading..."
              # Create the destination directory if it does not exist
              mkdir -p "$dest_dir"
              
              # Download the tarball from GitHub API
              curl -sL "https://api.github.com/repos/${owner}/${repo}/tarball/${ref}" -o "$dest_file"
              
              if [ $? -eq 0 ]; then
                echo "Downloaded tarball to $dest_file"
              else
                echo "Failed to download tarball for $owner/$repo ($ref)" >&2
              fi
            else
              echo "Tarball $dest_file already exists. Skipping download."
            fi
          fi
        done
        find "$ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE" -type f -mtime +${{ inputs.deleteAfter }} -exec rm -f {} \;

    - shell: pwsh
      if: runner.os == 'Windows'
      run: |
        $actionsFolder = "${{ inputs.actionsFolder }}"
        $deleteAfter = ${{ inputs.deleteAfter }}
        $cacheFolder = $env:ACTIONS_RUNNER_ACTION_ARCHIVE_CACHE

        Get-ChildItem -Path "$actionsFolder" -Recurse -Directory | ForEach-Object {
          $dir = $_.FullName
          $owner = (Split-Path -Path (Split-Path -Path $dir -Parent) -Leaf)
          $repo = (Split-Path -Path $dir -Parent | Split-Path -Leaf)
          $ref = (Split-Path -Path $dir -Leaf)
          $destDir = Join-Path -Path $cacheFolder -ChildPath "${owner}_${repo}"
          $destFile = Join-Path -Path $destDir -ChildPath "${ref}.zip"

          if (-Not (Test-Path -Path $destFile)) {
            Write-Host "Zip file for $owner/$repo ($ref) not found. Downloading..."
            New-Item -ItemType Directory -Force -Path $destDir | Out-Null
            Invoke-WebRequest -Uri "https://api.github.com/repos/${owner}/${repo}/zipball/${ref}" -OutFile $destFile
            if ($?) {
              Write-Host "Downloaded zip file to $destFile"
            } else {
              Write-Error "Failed to download zip file for $owner/$repo ($ref)"
            }
          } else {
            Write-Host "Zip file $destFile already exists. Skipping download."
          }
        }

        Get-ChildItem -Path $cacheFolder -Recurse -File | Where-Object {
          $_.LastWriteTime -lt (Get-Date).AddDays(-$deleteAfter)
        } | Remove-Item -Force
